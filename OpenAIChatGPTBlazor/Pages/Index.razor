@page "/"
@using Azure.AI.OpenAI
@using Markdig
@using System.Globalization
@inject IConfiguration Configuration
@inject OpenAIClient OpenAiClient
@inject IJSRuntime JS

<PageTitle>My ChatGPT</PageTitle>

<div class="top-row px-4 d-flex justify-content-between">
<h4>
    Welcome to my Chat using OpenAI
</h4>
    <div>
        <button class="btn btn-sm btn-light" @onclick="() => DownloadConversation()" title="Export">
            <i class="fas fa-file-export"></i> Export
        </button>
    </div>
</div>

<article class="content px-4">
<div class="row">
    @foreach (var chatMessage in _chat.Messages)
    {
        <h5>
            @chatMessage.Role
            <button class="btn btn-sm" @onclick="() => CopyMessageToNext(chatMessage)" title="Copy as input">
                <i class="fas fa-level-down-alt"></i>
            </button>
            <button class="btn btn-sm" @onclick="() => DeleteMessage(chatMessage)" title="Delete this message">
                <i class="fas fa-trash"></i>
            </button>
        </h5>
        @((MarkupString)Markdown.ToHtml(chatMessage.Content))
    }

    @if (!string.IsNullOrEmpty(_stream))
    {
        <h5>assistant</h5>
        @((MarkupString)Markdown.ToHtml(_stream))
    }
    @if (_loading)
    {
        <br />
        <div class="loader"></div>
        <p>... please wait ...</p>
    }
    @if (_warningMessage.Length > 0)
    {
        <div class="alert alert-warning">
            <strong>Warning!</strong> @_warningMessage.
        </div>
    }
</div>
<hr />
<div class="row">
    <div class="col-sm-8">
        <textarea type="text" class="form-control" id="nextArea"
                  placeholder="CTRL+Enter to submit search"
                  @bind="_next" @bind:event="oninput"
                  @ref=_nextArea
                  @onkeydown="@OnNextKeydown">
        </textarea>
    </div>
    <br />
    <div class="col-sm-2">
        <button class="btn btn-danger" @onclick="OnSearchClick" type="submit" disabled=@_loading>
            <i class="fas"></i>Submit
        </button>
    </div>
</div>
</article>

@code {

    private readonly ChatCompletionsOptions _chat = new ChatCompletionsOptions
        {
            Messages =
        {
            new ChatMessage(ChatRole.System,
                $"You are the assistant of a software engineer mainly working with .NET and Azure. Today is {DateTimeOffset.UtcNow.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}.")
        }
        };

    private string _warningMessage = string.Empty;
    private string _next = string.Empty;
    private string _stream = string.Empty;
    private bool _loading = true;
    private string _model = string.Empty;
    private ElementReference _nextArea;

    protected override void OnInitialized()
    {
        _model = Configuration["OpenAI:DeploymentId"];
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _loading = false;
            this.StateHasChanged();
            await _nextArea.FocusAsync();
        }
    }

    private async Task OnSearchClick()
    {
        await RunSearch();
    }

    private async Task OnNextKeydown(KeyboardEventArgs e)
    {
        if (e is { Key: "Enter" or "NumpadEnter", CtrlKey: true })
        {
            await RunSearch();
        }
    }

    private async Task RunSearch()
    {
        try
        {
            _loading = true;
            this.StateHasChanged();

            _chat.Messages.Add(new ChatMessage(ChatRole.User, _next));

            _next = string.Empty;

            var res = await OpenAiClient.GetChatCompletionsStreamingAsync(_model, _chat);

            await foreach (var choice in res.Value.GetChoicesStreaming())
            {
                await foreach (var msg in choice.GetMessageStreaming())
                {
                    // We collect response as it comes in and display it immediately
                    _stream += msg.Content;
                    this.StateHasChanged();
                    await JS.InvokeVoidAsync("scrollElementIntoView", _nextArea);
                }
            }

            _chat.Messages.Add(new ChatMessage(ChatRole.Assistant, _stream));

            _loading = false;
            _stream = string.Empty;
            _warningMessage = string.Empty;
        }
        catch (Exception ex)
        {
            _warningMessage = ex.Message;
        }
        finally
        {
            _loading = false;
            this.StateHasChanged();
        }
    }

    private void DeleteMessage(ChatMessage chatMessage)
    {
        _chat.Messages.Remove(chatMessage);
    }

    private async void CopyMessageToNext(ChatMessage chatMessage)
    {
        _next = chatMessage.Content;
        await _nextArea.FocusAsync();
    }

    private async Task DownloadConversation()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        sb.AppendLine("# ChatGPT Conversation");
        foreach (var message in _chat.Messages)
        {
            sb.AppendLine($"## {message.Role}");
            sb.AppendLine(message.Content);
        }

        using var stream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(sb.ToString()));

        var fileName = "conversation.md";

        using var streamRef = new DotNetStreamReference(stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

}